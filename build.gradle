import static org.gradle.internal.os.OperatingSystem.*

plugins {
    id 'java'
    id 'java-library'
    id "org.jetbrains.kotlin.jvm" version "1.3.70"
//    id "org.jetbrains.kotlin.kapt" version "1.3.10"
    id "com.github.johnrengelman.shadow" version '5.2.0'
}

// jitpack
group = 'com.github.kotlin-graphics'

ext {
    moduleName = 'com.github.kotlin_graphics.vkk'
    kotlin = 'org.jetbrains.kotlin:kotlin'
    kotlin_version = '1.3.70'
    kotlintest_version = '3.4.2'
    gli_version = '40443438c4a1d3018f96c80dba4488d47ea2c777'
    glm_version = 'b1cc153f5fe3f684f0d2adca4d609b90df368727'
    unsigned_version = '2b60945e2c17f1e20b1ee6c96f1695d0df06eed7'
    kool_version = '2bf4b991f361a386a08762f3203d5b8ba26cd5fa'
    lwjgl_version = "3.2.3"
    lwjgl_natives = current() == WINDOWS ? "windows" : current() == LINUX ? "linux" : "macos"
    sprivCross_version = "0.6.0-1.1.106.0"
}

dependencies {

    implementation "$kotlin-stdlib-jdk8"
    implementation "$kotlin-reflect"

    def kx = "com.github.kotlin-graphics"
//    api "${kx}:gln:$gln_version".toString()
    implementation "${kx}:gli:$gli_version".toString()
    implementation "${kx}.glm:glm:$glm_version".toString()
    implementation "${kx}:kool:$kool_version".toString()
    implementation "${kx}:kotlin-unsigned:$unsigned_version".toString()

    ["", "-vulkan"].each {
        implementation "org.lwjgl:lwjgl$it:$lwjgl_version"
        if (it != "-vulkan")
            runtimeOnly "org.lwjgl:lwjgl$it:$lwjgl_version:natives-$lwjgl_natives"
    }

    ext.spirvCross = "graphics.scenery:spirvcrossj:$sprivCross_version"
    implementation spirvCross
    runtimeOnly "$spirvCross:natives-$lwjgl_natives".toString()

//    compile group: 'org.jetbrains.kotlin.kapt', name: 'org.jetbrains.kotlin.kapt.gradle.plugin', version: '1.3.0-rc-146'

    // test

    ["-glfw"].each {
        testImplementation "org.lwjgl:lwjgl$it:$lwjgl_version"
        testRuntimeOnly "org.lwjgl:lwjgl$it:$lwjgl_version:natives-$lwjgl_natives"
    }
    testImplementation 'io.github.microutils:kotlin-logging:1.7.7'
    testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotlintest_version"
}

repositories {
    mavenCentral()
    maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    maven { setUrl('https://jitpack.io') }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
//    archives javadocJar
}

jar {
    inputs.property("moduleName", moduleName)
//    manifest.attributes('Automatic-Module-Name': moduleName)
}

compileKotlin {
    // Enable Kotlin compilation to Java 8 class files with method parameter name metadata
    kotlinOptions {
        freeCompilerArgs = ["-XXLanguage:+InlineClasses", "-Xjvm-default=enable"]
        jvmTarget = "11"
//        javaParameters = true
    }
    // As per https://stackoverflow.com/a/47669720
    // See also https://discuss.kotlinlang.org/t/kotlin-support-for-java-9-module-system/2499/9
    destinationDir = compileJava.destinationDir
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
//        javaParameters = true
    }
}

compileJava {
    dependsOn(':compileKotlin')
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName=${sourceSets["main"].output.asPath}"]
        classpath = files()
    }
}

jar { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

shadowJar.archiveClassifier = 'all'

test {
    useJUnitPlatform()

    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
//        showStandardStreams = true

        // Or we use events method:
        // events 'standard_out', 'standard_error'

        // Or set property events:
        // events = ['standard_out', 'standard_error']

        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}